/*

 ----------------------------------------------------------------------------
 | qewd-transform-json-editor: Transform JSON using a template              |
 |                                                                          |
 | Copyright (c) 2016-17 M/Gateway Developments Ltd,                        |
 | Redhill, Surrey UK.                                                      |
 | All rights reserved.                                                     |
 |                                                                          |
 | http://www.mgateway.com                                                  |
 | Email: rtweed@mgateway.com                                               |
 |                                                                          |
 |                                                                          |
 | Licensed under the Apache License, Version 2.0 (the "License");          |
 | you may not use this file except in compliance with the License.         |
 | You may obtain a copy of the License at                                  |
 |                                                                          |
 |     http://www.apache.org/licenses/LICENSE-2.0                           |
 |                                                                          |
 | Unless required by applicable law or agreed to in writing, software      |
 | distributed under the License is distributed on an "AS IS" BASIS,        |
 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 | See the License for the specific language governing permissions and      |
 |  limitations under the License.                                          |
 ----------------------------------------------------------------------------

  25 April 2017

*/

var transform = require('qewd-transform-json').transform;

module.exports = {

  handlers: {
    login: function(messageObj, session, send, finished) {
      var password = messageObj.params.password;
      if (!password || password === '') {
        finished({error: 'You must enter a password'});
        return;
      }

      if (true) {
        // no authentication database set up, so use QEWD management password

        if (password === this.userDefined.config.managementPassword) {
          session.timeout = 20 * 60;
          session.authenticated = true;
          finished({ok: true});    
        }
        else {
          finished({error: 'Invalid login attempt'});
        }
        return;
      }
      else {
        // use your own authentication credentials document
        var username = messageObj.params.username;
        if (!username || username === '') {
          finished({error: 'You must enter a username'});
          return;
        }
        var userCredentials = credentialsDoc.$(username);
        if (!userCredentials.exists) {
          // username not recognised
          finished({error: 'Invalid login attempt'});
          return;
        }
        if (digest(password) !== userCredentials.$('password').value) {
          // username ok but wrong password
          finished({error: 'Invalid login attempt'});
          return;
        }
        session.timeout = 20 * 60;
        session.authenticated = true;
        finished({ok: true});
        return;
      }
    },
    saveTemplate: function(messageObj, session, send, finished) {
      if (session.authenticated) {
        var templateObj = messageObj.params.template;
        console.log('template: ' + JSON.stringify(templateObj));
        var templateDoc = new this.documentStore.DocumentNode('qewdJsonTemplates', ['example']);
        templateDoc.setDocument(templateObj);
        finished();
      }
      else {
        finished({error: 'Unauthenticated'});
      }
    },
    testTemplate: function(messageObj, session, send, finished) {
      if (session.authenticated) {
        var templateObj = messageObj.params.template;
        var dataObj = messageObj.params.data;

        var fnDoc = new this.documentStore.DocumentNode('qewdJsonFunctions');
        var helpers = {};
        var error = false;
        fnDoc.forEachChild(function(fnName, childNode) {
          var code = childNode.$('code').value;
          try {
            eval('helpers[fnName] = ' + code);
          }
          catch(err) {
            error = 'Invalid helper function (' + fnName + '): ' + err;
          }
        });
        if (error) return finished({error: error});

        var outputObj = transform(templateObj, dataObj, helpers);

        finished(outputObj);
      }
      else {
        finished({error: 'Unauthenticated'});
      }
    },
    getFunctions: function(messageObj, session, send, finished) {
      if (session.authenticated) {
        var fnDoc = new this.documentStore.DocumentNode('qewdJsonFunctions');
        var results = [];
        fnDoc.forEachChild(function(fnName) {
          results.push(fnName);
        });
        finished(results);
      }
      else {
        finished({error: 'Unauthenticated'});
      }
    },
    getFunction: function(messageObj, session, send, finished) {
      if (session.authenticated) {
        var name = messageObj.params.name;
        if (!name || name === '') {
          return finished({error: 'Function name not specified'});
        }
        var fnDoc = new this.documentStore.DocumentNode('qewdJsonFunctions', [name]);
        if (!fnDoc.exists) {
          return finished({error: 'Specified function name does not exist'});
        }
        finished({
          code: fnDoc.$('code').value,
          name: name
        });
      }
      else {
        finished({error: 'Unauthenticated'});
      }
    },
    saveFunction: function(messageObj, session, send, finished) {
      if (session.authenticated) {
        var fnCode = messageObj.params.code;

        // check the code is valid

        var x;
        try {
          eval('x = ' + fnCode);
        }
        catch(err) {
          return finished({error: 'Invalid function: ' + err});
        }

        var fnName = messageObj.params.name;
        var fnDoc = new this.documentStore.DocumentNode('qewdJsonFunctions', [fnName]);
        fnDoc.delete();
        fnDoc.$('code').value = fnCode;
        finished({ok: true});
      }
      else {
        finished({error: 'Unauthenticated'});
      }
    },
    deleteFunction: function(messageObj, session, send, finished) {
      if (session.authenticated) {
        var fnName = messageObj.params.name;
        var fnDoc = new this.documentStore.DocumentNode('qewdJsonFunctions', [fnName]);
        fnDoc.delete();
        finished({ok: true});
      }
      else {
        finished({error: 'Unauthenticated'});
      }
    }
  }
};
